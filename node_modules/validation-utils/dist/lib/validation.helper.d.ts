/**
 * Checks value not to be null or undefined
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
export declare function validateNotNil<T>(validatedObject: T | null | undefined, errorText?: string): T;
/**
 * Checks value to be null or undefined
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
export declare function validateNil<T>(validatedObject: T, errorText?: string): Extract<T, null> | Extract<T, undefined>;
/**
 * Checks value not to be an empty Object, String or Array
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
export declare function validateNotEmpty<T>(validatedObject: T, errorText?: string): T;
/**
 * Checks value to be a number
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
export declare function validateNumber(validatedObject: any, errorText?: string): number;
/**
 * Checks value to be a number that is larger than 0
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
export declare function validatePositiveNumber(validatedObject: any, errorText?: string): number;
/**
 * Checks value to be a number that is less than the specified number
 * @param {*} validatedObject
 * @param {number} threshold - if validated number is equal or larger than this, throw an error
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
export declare function validateLessThan(validatedObject: any, threshold: number, errorText?: string): number;
/**
 * Checks value to be a number that is greater than specified number
 * @param {*} validatedObject
 * @param {number} threshold - if validated number is equal or less than this, throw an error
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
export declare function validateGreaterThan(validatedObject: any, threshold: number, errorText?: string): number;
/**
 * Checks value to equal specified entity (=== comparison)
 * @param {*} validatedEntity
 * @param {*} expectedEqualTo - if validated entity is not equal to this, throw an error
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
export declare function validateEqual<T>(validatedEntity: any, expectedEqualTo: T, errorText?: string): T;
/**
 * Checks value to be included among specified entities (indexOf !== -1 comparison)
 * @param {*} validatedEntity
 * @param {*} expectedOneOfEntities - if validated entity is not equal to one of these, throw an error
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
export declare function validateOneOf<T>(validatedEntity: any, expectedOneOfEntities: T[], errorText?: string): T;
export declare function validateSomeNotNil<T>(validatedEntities: T[], errorText?: string): T[];
/**
 * Checks value to be a number that is less than 0
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {number} validatedObject
 */
export declare function validateNegativeNumber(validatedObject: any, errorText?: string): number;
/**
 * Checks value to be a string
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {String} validatedObject
 */
export declare function validateString(validatedObject: any, errorText?: string): string;
/**
 * Checks value to be a True boolean
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {boolean} validatedObject
 */
export declare function validateBooleanTrue(validatedObject: any, errorText?: string): boolean;
/**
 * Checks value to be an instance of Date
 * @param {*} validatedEntity
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {boolean} validatedObject
 */
export declare function validateDate(validatedEntity: any, errorText?: string): Date;
/**
 * Checks value to be a boolean or a (case-insensitive) 'true' or 'false' string
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
export declare function validateBooleanNonStrict(validatedObject: any, errorText?: string): boolean | string;
/**
 * Checks value to be a boolean
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
export declare function validateBoolean(validatedObject: any, errorText?: string): boolean;
/**
 * Checks value to be a False boolean
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {boolean} validatedObject
 */
export declare function validateBooleanFalse(validatedObject: any, errorText?: string): boolean;
/**
 * Checks value to be a truthy entity
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
export declare function validateTruthy<T>(validatedObject: T, errorText?: string): T;
/**
 * Checks value to be a falsy entity
 * @param {*} validatedObject
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedObject
 */
export declare function validateFalsy<T>(validatedObject: T, errorText?: string): T;
/**
 * Checks value to be a function
 * @param {*} validatedEntity
 * @param {String} [errorText] - message for error thrown if validation fails
 * @returns {*} validatedEntity
 */
export declare function validateFunction(validatedEntity: any, errorText?: string): Function;
/**
 * Checks object to have at least a given set of properties defined
 * @param {*} validatedObject
 * @param {String[]} validatedProperties - names of properties which existence should be checked
 * @param {string} [errorMessage] - error message prefixed to the list of undefined properties
 * @returns {*} validatedObject
 */
export declare function validateHasProperties(validatedObject: any, validatedProperties: string[], errorMessage?: string): any;
/**
 * Checks object to have at least a given set of not nil properties
 * @param {*} validatedObject
 * @param {String[]} validatedProperties - names of properties which existence should be checked
 * @param {string} [errorMessage] - error message prefixed to the list of nil properties
 * @returns {*} validatedObject
 */
export declare function validateNotNilProperties(validatedObject: any, validatedProperties: string[], errorMessage?: string): any;
/**
 * Checks value to be an object
 * @param validatedObject
 * @param {string} [errorText] - message for error thrown if validation fails
 * @returns {Object} validatedObject
 */
export declare function validateObject<T>(validatedObject: T, errorText?: string): T;
/**
 * Checks value to be an object
 * @param validatedObject
 * @param {string} [errorText] - message for error thrown if validation fails
 * @returns {Object} validatedObject
 */
export declare function validateArray(validatedObject: any, errorText?: string): any[];
/**
 * Checks value to be an instance of a given class
 * @param validatedObject
 * @param {class} expectedClass
 * @param {string} [errorText] - message for error thrown if validation fails
 * @returns {Object} validatedObject
 */
export declare function validateInstanceOf<T>(validatedObject: T, expectedClass: any, errorText?: string): T;
/**
 * Checks value to inherit from a given class or to be that class
 * @param validatedClass
 * @param {class} expectedParentClass
 * @param {string} [errorText] - message for error thrown if validation fails
 * @returns {Object} validatedObject
 */
export declare function validateInheritsFrom(validatedClass: any, expectedParentClass: any, errorText?: string): any;
